// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// AOptimality
double AOptimality(const Eigen::MatrixXd& currentDesign);
RcppExport SEXP _rospd_AOptimality(SEXP currentDesignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type currentDesign(currentDesignSEXP);
    rcpp_result_gen = Rcpp::wrap(AOptimality(currentDesign));
    return rcpp_result_gen;
END_RCPP
}
// calculateAOptimalityPseudo
double calculateAOptimalityPseudo(const Eigen::MatrixXd& currentDesign);
RcppExport SEXP _rospd_calculateAOptimalityPseudo(SEXP currentDesignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type currentDesign(currentDesignSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateAOptimalityPseudo(currentDesign));
    return rcpp_result_gen;
END_RCPP
}
// calculateDEfficiency
double calculateDEfficiency(const Eigen::MatrixXd& currentDesign);
RcppExport SEXP _rospd_calculateDEfficiency(SEXP currentDesignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type currentDesign(currentDesignSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateDEfficiency(currentDesign));
    return rcpp_result_gen;
END_RCPP
}
// cDOptimality
double cDOptimality(const Eigen::MatrixXd& currentDesign);
RcppExport SEXP _rospd_cDOptimality(SEXP currentDesignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type currentDesign(currentDesignSEXP);
    rcpp_result_gen = Rcpp::wrap(cDOptimality(currentDesign));
    return rcpp_result_gen;
END_RCPP
}
// DOptimalityBlocked
double DOptimalityBlocked(const Eigen::MatrixXd& currentDesign, const Eigen::MatrixXd& blockedVar);
RcppExport SEXP _rospd_DOptimalityBlocked(SEXP currentDesignSEXP, SEXP blockedVarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type currentDesign(currentDesignSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type blockedVar(blockedVarSEXP);
    rcpp_result_gen = Rcpp::wrap(DOptimalityBlocked(currentDesign, blockedVar));
    return rcpp_result_gen;
END_RCPP
}
// IOptimality
double IOptimality(const Eigen::MatrixXd& currentDesign, const Eigen::MatrixXd& momentsMatrix, const Eigen::MatrixXd& blockedVar);
RcppExport SEXP _rospd_IOptimality(SEXP currentDesignSEXP, SEXP momentsMatrixSEXP, SEXP blockedVarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type currentDesign(currentDesignSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type momentsMatrix(momentsMatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type blockedVar(blockedVarSEXP);
    rcpp_result_gen = Rcpp::wrap(IOptimality(currentDesign, momentsMatrix, blockedVar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rospd_AOptimality", (DL_FUNC) &_rospd_AOptimality, 1},
    {"_rospd_calculateAOptimalityPseudo", (DL_FUNC) &_rospd_calculateAOptimalityPseudo, 1},
    {"_rospd_calculateDEfficiency", (DL_FUNC) &_rospd_calculateDEfficiency, 1},
    {"_rospd_cDOptimality", (DL_FUNC) &_rospd_cDOptimality, 1},
    {"_rospd_DOptimalityBlocked", (DL_FUNC) &_rospd_DOptimalityBlocked, 2},
    {"_rospd_IOptimality", (DL_FUNC) &_rospd_IOptimality, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rospd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
